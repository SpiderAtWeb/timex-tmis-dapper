@model CPathDataVM

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
    <link href="~/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="~/styles/kendo.metro.min.css" rel="stylesheet" />
}

@section VendorScripts {
    <script src="~/vendor/libs/select2/select2.js"></script>
    <script src="~/kendo/jszip.min.js"></script>
    <script src="~/kendo/kendo.all.min.js"></script>
}

@section PageScripts {
    <script src="~/js/form-layouts.js"></script>
    <script src="~/custom/loading-hide.js"></script>

    <script>
        $(document).ready(function () {

           $('select[name="Id"]').select2({
                placeholder: "- Choose or Enter a Path -",
                allowClear: true,
                tags: true, // This allows custom entries
                createTag: function (params) {
                    var term = $.trim(params.term);
                    if (term === '') {
                        return null;
                    }
                    return {
                        id: term,
                        text: term,
                        newOption: true
                    };
                },
                insertTag: function (data, tag) {
                    // Place the new tag at the end of the results
                    data.push(tag);
                }
              });


            var treeView = $("#treeview-left").kendoTreeView({
                dragAndDrop: true,
                checkboxes: { checkChildren: false }, // Enable checkboxes
                dataSource: new kendo.data.HierarchicalDataSource({ data: [] }),
                template: "#= item.text # | &nbsp;<span style='color: green;'>#= item.days #</span>&nbsp; | By&nbsp; <span style='color: blue;'>#= item.userLevel #</span> &nbsp; <span class='badge rounded-pill bg-label-danger' style='color: red;'>#= item.isAwaitTask #</span>",
                select: function (e) {
                    selectedNode = treeView.dataItem(e.node); // Store selected node
                },
                drop: handleDrop,
                over: handleOver
            }).data("kendoTreeView");

            var selectedNode = null; // Store the selected node

            // Handle the Drop event
            function handleDrop(e) {
                var sourceNode = e.sourceNode;
                var destinationNode = e.destinationNode;
                var dropPosition = e.dropPosition;
                var sourceParent = treeView.parent(sourceNode);
                var destinationParent = destinationNode ? treeView.parent(destinationNode) : null;

                if (dropPosition === "over" || (sourceParent && destinationParent && sourceParent[0] !== destinationParent[0])) {
                    e.setValid(false); // Prevent invalid drops
                }
            }

            // Handle the Over event
            function handleOver(e) {
                if (e.dropPosition === "over") {
                    e.setValid(false); // Prevent dropping ON a node
                }
            }

            // Add Parent Node
            $("#addParentBtn").click(function () {
                var activityId = $("#ActivityId").val();
                var activityText = $("#ActivityId option:selected").text();
                var userCatId = $("#UserCategoryId").val();
                var userCatText = $("#UserCategoryId option:selected").text();
                var days = $("#ActivityDays").val();
                 var isAwaitTask = $("#dependentTaskCheckbox").is(':checked') ? "AWAITING-TASK" : "";

                if (!activityId || activityId === "- Activity -") {
                    return alert("Please select a valid activity before proceeding.");
                }

                // if (treeView.dataSource.data().some(node => node.id == activityId)) {
                //     return alert("This activity is already added.");
                // }

                if (activityId && userCatId && days >= 0) {
                    treeView.dataSource.add({
                        id: activityId,
                        text: activityText,
                        days: days + " days",
                        userLevel: userCatText,
                        userLevelId: userCatId,
                        isAwaitTask : isAwaitTask,
                        expanded: true,
                        items: []
                    });
                }
            });

            // Add Child Node
            $("#addChildBtn").click(function () {
                if (!selectedNode) {
                    return alert("Please select a node first.");
                }

                var activityId = $("#ActivityId").val();
                var activityText = $("#ActivityId option:selected").text();
                var userCatId = $("#UserCategoryId").val();
                var userCatText = $("#UserCategoryId option:selected").text();
                var days = $("#ActivityDays").val();
                var isAwaitTask = $("#dependentTaskCheckbox").is(':checked') ? "AWAITING-TASK" : "";

                if (!activityId || activityId === "- Activity -") {
                    return alert("Please select a valid activity before proceeding.");
                }

                if (selectedNode.items.some(child => child.id === activityId)) {
                    return alert("This activity is already added as a child node.");
                }

                if (activityId && userCatId && days >= 0) {
                    selectedNode.append({
                        id: activityId,
                        text: activityText,
                        days: days + " days",
                        userLevel: userCatText,
                        userLevelId: userCatId,
                        isAwaitTask : isAwaitTask,
                    });

                    treeView.expand(treeView.findByText(selectedNode.text));
                }
            });

            // Delete Checked Nodes
            $("#deleteBtn").click(function () {
                var checkedNodes = getCheckedNodes(treeView.dataSource.view());
                if (checkedNodes.length === 0) {
                    return alert("Please check at least one node to delete.");
                }

                checkedNodes.forEach(function (node) {
                    treeView.remove(treeView.findByUid(node.uid));
                });
            });

            // Recursive function to retrieve checked nodes
            function getCheckedNodes(nodes) {
                var checkedNodes = [];
                nodes.forEach(function (node) {
                    if (node.checked) {
                        checkedNodes.push(node);
                    }
                    if (node.hasChildren) {
                        checkedNodes = checkedNodes.concat(getCheckedNodes(node.children.view()));
                    }
                });
                return checkedNodes;
            }

            // Save Tree Data
            $("#saveBtn").click(function () {
                var treeData = getTreeData(treeView.dataSource.view());
                var saveUrl = '@Url.Action("SaveTreeData", "CPTemplate", new { area = "PLMS" })';

                // Collect additional data
                  var cpId = parseInt($('#Id').val(), 10) || 0;
                  var cpName = $('#Id option:selected').text();

                // Combine tree data and additional data
                var saveData = {
                    treeData: treeData,
                    id: cpId,
                    cPName: cpName
                };

                $.ajax({
                    url: saveUrl,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(saveData),
                    success: function () {
                      location.reload();
                        alert("Tree data saved successfully!");
                    },
                    error: function (xhr, status, error) {
                        alert("Error saving tree data: " + error);
                    }
                });
            });

            // Recursive function to extract tree data as JSON
            function getTreeData(nodes) {
                return nodes.map(function (node) {
                    return {
                        activityId: node.id,
                        userCategoryId: node.userLevelId,
                        days: node.days,
                        isAwaitTask : node.isAwaitTask === "AWAITING-TASK",
                        activityList: node.hasChildren ? getTreeData(node.children.view()) : []
                    };
                });
            }

            function isInteger(value) {
                return typeof value === 'number' && Number.isInteger(value);
            }

            // Load Data via Ajax
            function handleChange() {

              treeView.dataSource.data([]);

                var selectedId = parseInt($('#Id').val(), 10);

                if (isInteger(selectedId)) {

                    // Show the loading text
                    document.getElementById("loadingText").style.display = "block";

                    var loadUrl = '@Url.Action("LoadActivites", "CPTemplate", new { area = "PLMS" })';

                    $.ajax({
                        url: loadUrl,
                        type: 'POST',
                        contentType: 'application/json',
                        data:   JSON.stringify(selectedId) ,
                        success: function (data) {
                            var treeData = data.map(item => ({
                                id: item.activityId,
                                text: item.activityText,
                                days: item.days + " days",
                                userLevel: item.userCategoryText,
                                userLevelId: item.userCategoryId,
                                isAwaitTask: item.isAwaitTask == true ? "AWAITING-TASK" : "",
                                expanded: true,
                                items: item.activityList ? item.activityList.map(subItem => ({
                                    id: subItem.activityId,
                                    text: subItem.activityText,
                                    days: subItem.days + " days",
                                    userLevel: subItem.userCategoryText,
                                    userLevelId: subItem.userCategoryId,
                                    isAwaitTask : subItem.isAwaitTask == true ? "AWAITING-TASK" : "",
                                })) : []
                            }));

                            treeView.dataSource.data(treeData);

                            // Hide the loading text after success
                            document.getElementById("loadingText").style.display = "none";
                        },
                        error: function (xhr, status, error) {
                            console.error("Error:", error);

                            // Hide the loading text after success
                            document.getElementById("loadingText").style.display = "none";
                        }
                    });
                }
            }

            $("#Id").change(function () {
                handleChange();
            });


        });
    </script>

}

@section PageStyles {
    <style>
        .demo-section {
            display: flex;
            justify-content: space-evenly;
        }
    </style>
}

@await Html.PartialAsync("_Loading")

<div class="panelDiv">
    <div class="card mb-6">
        <h5 class="card-header page-header">
            Critical Path Editor
        </h5>

        <div class="card-body">
            <div class="row">
                <div class="col-4 g-1">

                    <div class="form-floating form-floating-outline">
                        <select asp-for="@Model.Id" asp-items="@Model.CPathList" id="Id" class="select2 form-select" data-allow-clear="true">
                            <option value="" Disabled Selected>- Choose or Enter a Path -</option>
                        </select>

                        <label asp-for="Id">Critical Path</label>
                        <span asp-validation-for="Id" class="text-warning"></span>
                    </div>
                </div>
            </div>

            <hr>

            <div class="row mb-2">
                <div class="col-6 g-1">
                    <div class="form-floating form-floating-outline">
                        <select asp-for="@Model.ActivityId" asp-items="@Model.DropActivityList" id="ActivityId" class="select2 form-select" data-allow-clear="true">
                            <option Disabled Selected>
                                - Activity -
                            </option>
                        </select>

                        <label for="ActivityId">
                            Activity
                        </label>
                        <span asp-validation-for="ActivityId" class="text-warning"></span>
                    </div>
                </div>

                <div class="col-3 g-1">
                    <div class="form-floating form-floating-outline">
                        <select asp-for="@Model.UserCategoryId" asp-items="@Model.DropUserCategoryList" id="UserCategoryId" class="select2 form-select" data-allow-clear="true">
                            <option Disabled Selected>
                                - User Category -
                            </option>
                        </select>

                        <label for="UserCategoryId">
                            User Category
                        </label>
                        <span asp-validation-for="UserCategoryId" class="text-warning"></span>
                    </div>
                </div>

                <div class="col-1 g-1">
                    <div class="form-floating form-floating-outline">
                        <input asp-for="@Model.ActivityDays" type="text" id="ActivityDays" class="form-control" placeholder="5" />
                        <label for="farCode">Days</label>
                        <span asp-validation-for="ActivityDays" class="text-warning"></span>
                    </div>
                </div>

                <div class="col-2 g-1">
                    <div class="form-floating form-floating-outline d-flex justify-content-center align-items-center h-100">
                        <span class="form-check">
                            <input class="form-check-input" type="checkbox" id="dependentTaskCheckbox">
                            <label class="form-check-label" for="dependentTaskCheckbox">
                                AWAITING-TASK
                            </label>
                        </span>
                    </div>
                </div>

               
            </div>

            <div id="example">
                <div class="row g-1 justify-content-end">
                    <div class="col-2">
                        <button id="addParentBtn" class="btn btn-success w-100">Add Activity</button>
                    </div>
                    <div class="col-2">
                        <button id="addChildBtn" class="btn btn-success w-100">Add Sub Activity</button>
                    </div>
                    <div class="col-2">
                        <button id="deleteBtn" class="btn btn-danger w-100">Delete Selected</button>
                    </div>
                </div>

                <div class="demo-section k-content mt-5">
                    <div>
                        <h4>Critical Path Steps</h4>
                        <div id="loadingText" style="display: none;">Loading, please wait...</div>

                        <div id="treeview-left"></div>
                    </div>
                </div>

                @* <button id="saveBtn">Save Tree</button> *@
                <div class="row justify-content-end">
                    <div class="col-2 pt-6">
                        <button id="saveBtn" class="btn btn-primary w-100">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


