@model GoodPassVM

@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
    <link rel="stylesheet" href="~/vendor/libs/select2/select2.css" />
    <link href="~/vendor/libs/toastr/toastr.css" rel="stylesheet" />
}

@section VendorScripts {
    <script src="~/vendor/libs/select2/select2.js"></script>
    <script src="~/vendor/libs/toastr/toastr.js"></script>
}

@section PageScripts {
    <script src="~/js/form-layouts.js"></script>

    <script>
        /* --------------------------------------------------
           1Ô∏è‚É£  Gatepass-Address section
        -------------------------------------------------- */
        let gatepassCount = 1;

        function bindGatepassHandlers() {
            $('#gpAddressContainer').on('click', function (e) {
                const $target = $(e.target);
                const $addBtn = $target.closest('.add-gatepass');
                const $removeBtn = $target.closest('.remove-gatepass');

                /* ------ Add row ------ */
                if ($addBtn.length) {
                    const $block = $addBtn.closest('.row');
                    const $currentTo = $block.find('select[id^="gatepassTo"]');

                    if (!$currentTo.length || $currentTo.prop('selectedIndex') === 0) {
                        toastr.error('Please select "Gatepass To" before adding another row.');
                        return;
                    }

                    const selText = $currentTo.find('option:selected').text();
                    const selValue = $currentTo.val();

                    gatepassCount++;
                    const $new = $block.clone().attr('id', `gatepass-block${gatepassCount}`);

                    // Replace gatepassFrom <select> with readonly <input>
                    $new.find('select[id^="gatepassFrom"], input[id^="gatepassFrom"]')
                        .replaceWith(
                            $('<input>', {
                                type: 'text',
                                id: `gatepassFrom${gatepassCount}`,
                                name: `gatepassFrom${gatepassCount}`,
                                value: selText,
                                class: 'form-control text-success',
                                readonly: true,
                                'data-value': selValue
                            })
                        );

                    // Reset new "to" select
                    $new.find('select[id^="gatepassTo"]').each(function () {
                        $(this)
                            .attr({
                                id: `gatepassTo${gatepassCount}`,
                                name: `gatepassTo${gatepassCount}`
                            })
                            .prop('selectedIndex', 0)
                            .prop('disabled', false) // ensure not disabled
                            .removeClass('select2-hidden-accessible') // clean up old select2
                            .next('.select2-container').remove(); // remove select2 UI wrapper if cloned
                    });

                    // Add new buttons
                    const $buttons = $('<div class="d-flex gap-1">' +
                        '<button type="button" class="btn btn-sm btn-success add-gatepass">+</button>' +
                        '<button type="button" class="btn btn-sm btn-danger remove-gatepass">‚àí</button>' +
                        '</div>');

                    $new.find('.col-4:last').html($buttons);

                    // Append to container and reinit select2
                    $('#gpAddressContainer').append($new);
                    $new.find('select.select2').select2(); // reinit select2

                    updateGatepassIds();
                    updateButtons('#gpAddressContainer', 'gatepass', updateGatepassIds);
                }

                /* ------ Remove row ------ */
                if ($removeBtn.length) {
                    $removeBtn.closest('.row').remove();
                    updateGatepassIds();
                    updateButtons('#gpAddressContainer', 'gatepass', updateGatepassIds);
                }
            });
        }

        function updateGatepassIds() {
            const $rows = $('#gpAddressContainer .row');
            gatepassCount = $rows.length;

            $rows.each(function (i) {
                const idx = i + 1;
                const $row = $(this).attr('id', `gatepass-block${idx}`);

                /* carry over previous "to" -> current "from" */
                if (idx > 1) {
                    const $prevTo = $rows.eq(i - 1).find('select[id^="gatepassTo"]');
                    if ($prevTo.prop('selectedIndex') > 0) {
                        $row.find('input[id^="gatepassFrom"]')
                            .val($prevTo.find('option:selected').text())
                            .attr('data-value', $prevTo.val());
                    }
                }

                $row.find('[id^="gatepassFrom"]').attr({ id: `gatepassFrom${idx}`, name: `gatepassFrom${idx}` });
                $row.find('[id^="gatepassTo"]').attr({ id: `gatepassTo${idx}`, name: `gatepassTo${idx}` });
                updateLabels($row, 'gatepassFrom', 'gatepassTo', idx);
                $row.find('.add-gatepass').attr('id', `addGatepass${idx}`);
                $row.find('.remove-gatepass').attr('id', `removeGatepass${idx}`);
            });
        }

        /* --------------------------------------------------
           2Ô∏è‚É£  GP-Details section (items)
        -------------------------------------------------- */
        let itemRowCount = 1;

        function bindItemHandlers() {
            $('#gpDetailsContainer').on('click', function (e) {
                const $target = $(e.target);
                const $addBtn = $target.closest('.add-item');
                const $removeBtn = $target.closest('.remove-item');

                /* ------ Add item row ------ */
                if ($addBtn.length) {
                    const $block = $addBtn.closest('.row');

                    const itemName = $block.find('input[id^="itemName"]').val();
                    const itemQty = $block.find('input[id^="itemQty"]').val();
                    const itemUnit = $block.find('select[id^="itemUnit"]').val();

                    if (!itemName || !itemQty || !itemUnit) {
                        toastr.error('Please fill in Item Name, Quantity and Unit before adding another row.');
                        return;
                    }

                    itemRowCount++;
                    const $new = $block.clone().attr('id', `item-block${itemRowCount}`);

                    $new.find('input, select').each(function () {
                        const $el = $(this);
                        const base = $el.attr('id').replace(/\d+$/, '');
                        $el.attr({ id: `${base}${itemRowCount}`, name: `${base}${itemRowCount}` });

                        if ($el.is('select')) {
                            /* keep the same select element BUT clear any selected value */
                            $el.prop('selectedIndex', 0).trigger('change');   // ensures visual reset
                        } else {
                            $el.val('');                                      // clear input
                        }
                    });

                    updateLabels($new, 'itemName', 'itemQty', itemRowCount);
                    $new.find('.add-item, .remove-item').remove();

                    $('#gpDetailsContainer').append($new);
                    updateButtons('#gpDetailsContainer', 'item', updateItemIds);
                }

                /* ------ Remove item row ------ */
                if ($removeBtn.length) {
                    $removeBtn.closest('.row').remove();
                    updateItemIds();
                    updateButtons('#gpDetailsContainer', 'item', updateItemIds);
                }
            });
        }

        function updateItemIds() {
            const $rows = $('#gpDetailsContainer .row');
            itemRowCount = $rows.length;

            $rows.each(function (i) {
                const idx = i + 1;
                const $row = $(this).attr('id', `item-block${idx}`);

                $row.find('input,select').each(function () {
                    const $el = $(this);
                    const base = $el.attr('id').replace(/\d+$/, '');
                    $el.attr({ id: `${base}${idx}`, name: `${base}${idx}` });
                });

                updateLabels($row, 'itemName', 'itemQty', idx);
                $row.find('.add-item').attr('id', `addItem${idx}`);
                $row.find('.remove-item').attr('id', `removeItem${idx}`);
            });
        }

        /* --------------------------------------------------
           üîß  Shared helpers
        -------------------------------------------------- */
        function updateLabels($row, firstId, secondId, idx) {
            const $labels = $row.find('label');
            if ($labels.length >= 2) {
                $labels.eq(0).attr('for', `${firstId}${idx}`);
                $labels.eq(1).attr('for', `${secondId}${idx}`);
            }
        }

        function updateButtons(container, prefix, updateIdsFn) {
            const $rows = $(`${container} .row`);
            $rows.each(function (i) {
                const $row = $(this);
                const last = i === $rows.length - 1;
                const isItem = prefix === 'item';

                /* clear old buttons */
                $row.find(`.add-${prefix}, .remove-${prefix}`).remove();

                if (last) {
                    /* add button */
                    $('<button>', {
                        type: 'button',
                        class: `btn btn-primary ${isItem ? 'w-50 me-1' : 'h-100 me-2'} add-${prefix}`,
                        html: '<i class="fa-solid fa-plus"></i>'
                    }).appendTo($row.find(isItem ? '.col-1:last' : '.col-4:last'));

                    /* remove button if >1 rows */
                    if ($rows.length > 1) {
                        $('<button>', {
                            type: 'button',
                            class: `btn btn-danger ${isItem ? 'w-50' : 'h-100'} remove-${prefix}`,
                            html: '<i class="fa-solid fa-trash-can"></i>'
                        }).appendTo($row.find(isItem ? '.col-1:last' : '.col-4:last'));
                    }
                }
            });
            updateIdsFn();
        }

        /* --------------------------------------------------
           üöÄ  Init on DOM ready
        -------------------------------------------------- */
        $(function () {
            bindGatepassHandlers();
            bindItemHandlers();
            updateButtons('#gpAddressContainer', 'gatepass', updateGatepassIds);
            updateButtons('#gpDetailsContainer', 'item', updateItemIds);
        });
    </script>

    <script>
        const returnableCheckbox = document.getElementById('returnable');
        const returnDaysInput = document.getElementById('returnDays');

        returnableCheckbox.addEventListener('change', function () {
            if (this.checked) {
                returnDaysInput.readOnly = false;
            } else {
                returnDaysInput.value = '';
                returnDaysInput.readOnly = true;
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            $('#submitGatepass').on('click', function (e) {
                e.preventDefault();

                     let $btn = $(this);
        let originalText = $btn.text();

        $btn.prop('disabled', true).text('Sending Mail...');

                let data = {};

                // 1. Dynamic Gatepass Address rows
                data.GatepassAddresses = [];

                let isValid = true;
                let toValues = [];

                const from = $('[id="gatepassFrom1"]').val()?.trim();
                data.GatepassAddresses.push({
                    LocId: from
                });

                $('#gpAddressContainer .row').each(function () {
                   
                    const to = $(this).find('[id^="gatepassTo"]').val()?.trim();                 

                    //from and to same
                    if (from && to && from === to) {
                        isValid = false; // duplicate "From" and "To" values
                        toastr.error("Please ensure 'From' and 'To' are not the same.");
                        return; // skip this iteration
                    }    

                    if (!from || !to) {
                        isValid = false; // missing field
                        toastr.error("Please ensure all 'From' and 'To' fields.");
                        return; // skip this iteration
                    }

                    if (toValues.includes(to)) {
                        isValid = false; // duplicate "To" value
                        toastr.error("Please ensure 'To' numbers are not duplicated.");
                        return;
                    }

                    toValues.push(to);

                    data.GatepassAddresses.push({
                        LocId: to
                    });
                });

                if (!isValid) {
                   $btn.prop('disabled', false).text(originalText);
                    return;
                }


                // 2. Static fields
                data.Attention = $('#Attention').val();
                data.GpSubject = $('#GpSubject').val();
                data.SendApprovalTo = $('#SendApprovalTo').val();
                data.IsReturnable = $('#returnable').is(':checked');
                data.ReturnDays = $('#returnDays').val();
                data.Remarks = $('#remarks').val();



                  if (!data.GpSubject) {
                    toastr.error("Please ensure 'Gatepass Subject' fields is filled.");
                    return;
                }

                if (!data.Attention) {
                    toastr.error("Please ensure 'Attention' fields is filled.");
                    return;
                }

                if (!data.SendApprovalTo) {
                    toastr.error("Please ensure 'SendApprovalTo' fields is filled.");
                    return;
                }

                if (!data.Remarks) {
                    toastr.error("Please ensure 'Remarks' fields is filled.");
                    return;
                }

                // 3. Dynamic Item rows
                data.Items = [];
                $('#gpDetailsContainer .row').each(function () {
                    const itemName = $(this).find('[id^="itemName"]').val();
                    const itemDesc = $(this).find('[id^="itemDesc"]').val();
                    const qty = $(this).find('[id^="itemQty"]').val();
                    const uom = $(this).find('[id^="itemUnit"]').val();

                    if (!itemName || !itemDesc || !qty || !uom) {
                        isValid = false; // missing field
                        toastr.error("Please ensure all item fields are filled.");
                        return; // skip this iteration
                    }

                    // Check if itemName is already in the array
                    if (itemName && qty && uom) {
                        data.Items.push({
                            ItemName: itemName,
                            ItemDesc: itemDesc,
                            Quantity: qty,
                            ItemUnit: uom
                        });
                    }
                });

                if (!isValid) {
                    return;
                }

                // 4. Send AJAX to ASP.NET MVC controller
                $.ajax({
                    url: '/TGPS/GenGoodsPass/Create',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (response) {
                        // Redirect on success
                        window.location.href = '@Url.Action("Index", "GenGoodsPass")';
                    },
                    error: function (xhr) {
                        // Try to get server-sent error message
                        var errorMsg = xhr.responseText || 'An error occurred while submitting the form.';
                        toastr.error(errorMsg);
                        console.log("Error details:", errorMsg);
                    },
                     complete: function () {
            // Re-enable and reset the button in both success or error
            $btn.prop('disabled', false).text(originalText);
        }
                });
            });
        });
    </script>
}

@* ************** Content ************** *@
<!-- Ajax Sourced Server-side -->

<div class="card">
    <h5 class="card-header page-header">Create Goods Gate Pass</h5>

    <form asp-action="Create" method="post">

        <div class="card-body">
            <div class="mb-1">
                <small class="text-light fw-medium">Select the destination(s) to which the goods are to be dispatched.</small>
            </div>
            <div id="gpAddressContainer">
                <div class="row mb-2" id="gatepass-block1">
                    <div class="col-4 g-1">
                        <div class="form-floating form-floating-outline">
                            <select asp-items="@Model.GoodsFrom" id="gatepassFrom1" name="gatepassFrom1" class="form-select">
                                <option disabled selected>- Select From -</option>
                            </select>
                            <label for="gatepassFrom1">Goods From</label>
                        </div>
                    </div>
                    <div class="col-4 g-1">
                        <div class="form-floating form-floating-outline">
                            <select asp-items="@Model.GoodsTo" id="gatepassTo1" name="SendApprovalTo" class="select2 form-select">
                                <option disabled selected>- Select To -</option>
                            </select>
                            <label for="gatepassTo1">Goods To</label>
                        </div>
                    </div>
                    <div class="col-4 g-1">
                    </div>
                </div>
            </div>
        </div>

        <hr class="m-0">
        <div class="card-body">
            <div class="mb-1">
                <small class="text-light fw-medium">Fill the necessary details for the gate pass.</small>
            </div>
            <div class="row mb-3">
                <div class="col-4 g-1">
                    <div class="form-floating form-floating-outline">
                        <input type="text" id="GpSubject" class="form-control" placeholder="New Order Threads" />
                        <label for="GpSubject">Gate pass Subject</label>
                    </div>
                </div>
                <div class="col-4 g-1">
                        <div class="form-floating form-floating-outline">
                            <input type="text" id="Attention" class="form-control" placeholder="Mr.Silva" />
                            <label for="Attention">Attention</label>
                        </div>
                </div>
                <div class="col-4 g-1">
                    <div class="form-floating form-floating-outline">
                        <select asp-items="@Model.ApprovalList" id="SendApprovalTo" class="select2 form-select" data-allow-clear="true">
                            <option Disabled Selected>- Select -</option>
                        </select>

                        <label for="machineBrandId">Send Approval To</label>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-4 g-1">
                    <div class="row">
                        <div class="col d-flex align-items-center justify-content-center">
                            <span class="form-check">
                                <input class="form-check-input me-2" type="checkbox" id="returnable" name="IsReturnable" value="false">
                                <label class="form-check-label" for="returnable">Returnable</label>
                            </span>
                        </div>
                        <div class="col">
                            <div class="form-floating form-floating-outline">
                                <input type="number" id="returnDays" class="form-control" name="ReturnDays" placeholder="Max 365" max="365" />
                                <label for="returnDays">Return Days</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-8 g-1">
                  <div class="form-floating form-floating-outline">
                        <input type="text" id="remarks" name="Remarks" class="form-control" placeholder="..." />
                        <label for="remarks">Remarks</label>
                    </div>
                </div>
            </div>
        </div>

        <hr class="m-0">
        <div class="card-body">
            <div class="mb-1">
                <small class="text-light fw-medium">Complete the items and their descriptions for the gate pass..</small>
            </div>
            <div id="gpDetailsContainer">
                <div class="row mb-2" id="item-block1">
                    <div class="col-3 g-1">
                        <div class="form-floating form-floating-outline">
                            <input type="text" id="itemName1" name="itemName1" class="form-control" placeholder="SN#123456" />
                            <label for="itemName1">Item Name</label>
                        </div>
                    </div>
                    <div class="col-4 g-1">
                        <div class="form-floating form-floating-outline">
                            <input type="text" id="itemDesc1" name="itemDesc1" class="form-control" placeholder="TKT160 THREAD" />
                            <label for="itemDesc1">Item Description</label>
                        </div>
                    </div>
                    <div class="col-2 g-1">
                        <div class="form-floating form-floating-outline">
                            <input type="text" id="itemQty1" name="Qty1" class="form-control" placeholder="12" />
                            <label for="Qty1">Quantity</label>
                        </div>
                    </div>
                    <div class="col-2 g-1">
                        <div class="form-floating form-floating-outline">
                            <select asp-items="@Model.Units" id="itemUnit1" name="itemUnit1" class="form-select" data-allow-clear="true">
                                <option disabled selected>- Select -</option>
                            </select>
                            <label for="uom1">UOM</label>
                        </div>
                    </div>
                    <div class="col-1 g-1 d-flex justify-content-between align-items-stretch">
                    </div>
                </div>
            </div>

            <div class="pt-1">
                <button id="submitGatepass" type="button" class="btn btn-primary me-1">Submit</button>
                <a asp-controller="GenGoodsPass" asp-action="Index" class="btn btn-outline-secondary">Back to List</a>
            </div>

        </div>
    </form>
</div>



